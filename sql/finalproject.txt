create database if not exists collage_db ;
use collage_db ;
create table students(
	studentid int primary key,
    firstname varchar(255),
    lastname varchar(255),
    email varchar(255),
    birthdate date,
    enrollmentdate date 
);

create table course(
	courseid int primary key,
    coursename varchar(255),
    departmentid int ,
    foreign key (departmentid) REFERENCES department(departmentid)
);

create table instructors(
	instructorid int primary key,
    firstname varchar(255),
    lastname varchar(255),
    email varchar(255),
    departmentid int ,
    foreign key (departmentid) REFERENCES department(departmentid)
);

create table enrollment(
	enrollmentid int primary key ,
    studentid int ,
    courseid int ,
    enrollmentdate date ,
    foreign key (studentid) REFERENCES students(studentid),
    foreign key (courseid) REFERENCES course(courseid)  
);

create table department(
	departmentid int primary key,
    departmentname varchar(255)
);


insert into department (departmentid, departmentname) values
(1, 'Computer Science'),
(2, 'Mathematics'),
(3, 'Physics'),
(4, 'English Literature'),
(5, 'Economics');


insert into students (studentid, firstname, lastname, email, birthdate, enrollmentdate) values
(1, 'Prakash', 'Jain', 'prakash.jain@example.com', '1998-03-21', '2022-07-15'),
(2, 'Anita', 'Sharma', 'anita.sharma@example.com', '1999-11-11', '2022-07-15'),
(3, 'Rahul', 'Mehta', 'rahul.mehta@example.com', '2000-05-17', '2023-01-10'),
(4, 'Sneha', 'Patel', 'sneha.patel@example.com', '2001-08-25', '2023-01-10'),
(5, 'Vikram', 'Kapoor', 'vikram.kapoor@example.com', '1998-12-02', '2021-08-20'),
(6, 'Nisha', 'Iyer', 'nisha.iyer@example.com', '2002-07-09', '2023-07-15'),
(7, 'Karan', 'Verma', 'karan.verma@example.com', '2000-01-14', '2022-07-15'),
(8, 'Meena', 'Joshi', 'meena.joshi@example.com', '2001-09-30', '2022-07-15');


insert into course (courseid, coursename, departmentid) values
(1, 'Introduction to Programming', 1),
(2, 'Data Structures', 1),
(3, 'Calculus I', 2),
(4, 'Linear Algebra', 2),
(5, 'Classical Mechanics', 3),
(6, 'Quantum Physics', 3),
(7, 'English Poetry', 4),
(8, 'Microeconomics', 5);


insert into instructors (instructorid, firstname, lastname, email, departmentid) values
(1, 'Ravi', 'Kumar', 'ravi.kumar@example.com', 1),
(2, 'Sunita', 'Desai', 'sunita.desai@example.com', 1),
(3, 'Manish', 'Gupta', 'manish.gupta@example.com', 2),
(4, 'Asha', 'Menon', 'asha.menon@example.com', 3),
(5, 'Vijay', 'Rao', 'vijay.rao@example.com', 4),
(6, 'Priya', 'Shah', 'priya.shah@example.com', 5);


insert into enrollment (enrollmentid, studentid, courseid, enrollmentdate) values
(1, 1, 1, '2022-07-20'),
(2, 1, 2, '2022-07-20'),
(3, 2, 3, '2022-07-20'),
(4, 3, 4, '2023-01-15'),
(5, 3, 1, '2023-01-15'),
(6, 4, 5, '2023-01-15'),
(7, 5, 6, '2021-08-25'),
(8, 6, 7, '2023-07-20'),
(9, 7, 8, '2022-07-25'),
(10, 8, 2, '2022-07-25');

INSERT INTO students (studentid, firstname, lastname, email, birthdate, enrollmentdate)
VALUES (9, 'Amit', 'Singh', 'amit.singh@example.com', '2000-10-15', '2023-07-20');

SELECT * FROM students;

UPDATE students
SET email = 'prakash.jain1@example.com'
WHERE studentid = 1;

DELETE FROM students
WHERE studentid = 9;

SELECT * FROM students
WHERE enrollmentdate > '2022-12-31';

SELECT c.*
FROM course c
JOIN department d ON c.departmentid = d.departmentid
WHERE d.departmentname = 'Mathematics'
LIMIT 5;

SELECT c.coursename, COUNT(e.studentid) AS student_count
FROM enrollment e
JOIN course c ON e.courseid = c.courseid
GROUP BY c.coursename
HAVING COUNT(e.studentid) > 5;

SELECT s.studentid, s.firstname, s.lastname
FROM students s
WHERE s.studentid IN (
    SELECT studentid FROM enrollment e
    JOIN course c ON e.courseid = c.courseid
    WHERE c.coursename = 'Introduction to Programming'
)
AND s.studentid IN (
    SELECT studentid FROM enrollment e
    JOIN course c ON e.courseid = c.courseid
    WHERE c.coursename = 'Data Structures'
);


SELECT DISTINCT s.studentid, s.firstname, s.lastname
FROM students s
JOIN enrollment e ON s.studentid = e.studentid
JOIN course c ON e.courseid = c.courseid
WHERE c.coursename IN ('Introduction to SQL', 'Data Structures');

SELECT AVG(credits) AS average_credits FROM course;

ALTER TABLE course ADD credits DECIMAL(3,1);
UPDATE course 
SET credits = CASE courseid
    WHEN 1 THEN 4.0
    WHEN 2 THEN 3.5
    WHEN 3 THEN 4.0
    WHEN 4 THEN 3.0
    WHEN 5 THEN 4.0
    WHEN 6 THEN 4.5
    WHEN 7 THEN 3.0
    WHEN 8 THEN 3.5
END;

ALTER TABLE instructors ADD salary DECIMAL(10,2);
UPDATE instructors 
SET salary = CASE instructorid
    WHEN 1 THEN 90000
    WHEN 2 THEN 85000
    WHEN 3 THEN 78000
    WHEN 4 THEN 95000
    WHEN 5 THEN 70000
    WHEN 6 THEN 80000
END;


SELECT MAX(i.salary) AS max_salary
FROM instructors i
JOIN department d ON i.departmentid = d.departmentid
WHERE d.departmentname = 'Computer Science';

SELECT d.departmentname, COUNT(DISTINCT e.studentid) AS student_count
FROM enrollment e
JOIN course c ON e.courseid = c.courseid
JOIN department d ON c.departmentid = d.departmentid
GROUP BY d.departmentname;

SELECT s.studentid, s.firstname, s.lastname, c.coursename
FROM students s
INNER JOIN enrollment e ON s.studentid = e.studentid
INNER JOIN course c ON e.courseid = c.courseid;

SELECT s.studentid, s.firstname, s.lastname, c.coursename
FROM students s
LEFT JOIN enrollment e ON s.studentid = e.studentid
LEFT JOIN course c ON e.courseid = c.courseid;

SELECT DISTINCT s.studentid, s.firstname, s.lastname
FROM students s
JOIN enrollment e ON s.studentid = e.studentid
WHERE e.courseid IN (
    SELECT courseid
    FROM enrollment
    GROUP BY courseid
    HAVING COUNT(studentid) > 10
);

SELECT studentid, firstname, lastname, YEAR(enrollmentdate) AS enrollment_year
FROM students;

SELECT instructorid, CONCAT(firstname, ' ', lastname) AS fullname, email
FROM instructors;

SELECT 
    enrollmentid,
    studentid,
    courseid,
    enrollmentdate,
    COUNT(studentid) OVER (ORDER BY enrollmentdate, enrollmentid) AS running_total
FROM enrollment;


SELECT 
    studentid,
    firstname,
    lastname,
    enrollmentdate,
    CASE 
        WHEN DATEDIFF(CURDATE(), enrollmentdate) > (365 * 4) THEN 'Senior'
        ELSE 'Junior'
    END AS level
FROM students;
